<?php


namespace MediaWiki\Extension\AspaklaryaLockDown\API;

use ApiBase;
use Wikimedia\ParamValidator\ParamValidator;

class ApiGetBadWords extends ApiBase {
    public function execute() {
        if (!$this->getUser()->isAllowed('get-bad-words')) {
            $this->dieWithError('bad-words-permission-denied', 'bad-words-permission-denied');
        }
        $params = $this->extractRequestParams();
        $text = $params['text'];
        $result = $this->checktext($text);
        $this->getResult()->addValue(null, $this->getModuleName(), $result);
    }
    public function checktext(string $text) {
        $words = ['פין', 'אינוס', 'גיי', 'סקס', 'סקסו[אלס]', 'הומו[אספ]', 'הומו ', '(\s|ה)מין', 'זנו[ת]', '[^מ]זונ[הות]', '[^מ]זונות', 'זנות', 'לזיין', 'פלייבוי', 'תשוקה', 'סרסור', 'נערת ליווי', 'יצאנית', 'פריצות', 'זימה', 'יחסי מין', 'יחסי-מין', 'טרנסג\'נדר', 'לסבי[םוזית]*', 'אופי מיני', 'אופן מיני', 'אקט מיני', 'תוכן מיני', 'מיניים', 'מעשים מגונים', 'מעשיה מגונה', 'פורנו', 'ח[ו]*ש[ו]*פ[הניות]*', 'איידס', 'א[י]*בר מין', 'א[י]*בר[י]* [ה]*מין', '[ו]*נ[ו]*ס[^ק]', '[מל]*אונ[ןנותם]+', 'מאוננים', 'יחסי אהבה', 'רומ+[נן]+[^יה]', 'ע[י]*רו[מים]+', 'אינטימי', 'פדופיל', 'הרמון', 'פ[י]*לגש', 'העדפה מינית', 'דוגמנ[ית]*', 'שדיים', 'דגדגן', 'מאהב[ת]', '[מלה]*תאהב', 'קונדום', 'אמצעי מניעה', '(\s|^)[ו]*וסת', 'ילד[ים]* לא חוקי[ים]*', 'ב[ןת]+ לא חוקי[תיים]*', 'שחקנית', 'זמרת', 'משגל', 'א[י]*רוטי', 'להט"ב', 'להטב"ק', 'חד מיני', 'חד-מיני', 'הומופוב', 'מערומיה', 'בתול[הותי]', 'אורגזמה', 'נואף', 'ניאוף', 'לנאוף', 'נאף', 'בן[-]זוגו', '(יצא|יציאה) מהארון', '[^ש]מיני(ו)?ת', 'הגאים', '[ה]גאה', 'א[י]רוטי', 'סטרייט', 'BDSM', 'בדס"מ', 'מצעד הגאווה', 'נער[ו]ת ליווי', 'נאהבים', 'אהובתו', 'להט"בים', 'פל[י]*רט[ו]*ט', 'אורגיה', 'אורגיות', 'sex', 'מלכת היופי', 'מיס יוניברס', 'מיס תבל', 'מיס עולם', 'איבר מינ', 'בן זוגו', 'בת זוגה', 'מחוץ לנישואין', 'נישואים פתוחים', 'נישואים גאים', 'בת לויה', 'מערכת יחסים', 'תחרות יופי', 'אבולוצי[הונרית]', 'ברירה [ה]*טבעית', 'התפתחות החיים', 'מוצא החיים', 'אדם קדמון', 'אדם הקדמון', 'מ[י]*ליו[ןני]* שנ[יםה]', 'מ[י]ליארד[י]* שנ[הים]', '000 שנה', '000 שנ[הים]*', 'אלף שנ[הים]', 'פרה[י]*[\sהי]*סטורי[הים]*', 'לפני זמנ[י]*נו', 'גיל היקום', 'ביקורת המקרא', 'ה[יו]*צרות כדור הארץ', 'ה[יו]*וצרות היקום', '((השלישי|הרביעי|החמישי|השישי|השביעי|השמיני|התשיעי|העשירי) (לפנה"ס|לפני הספירה))', 'לפנה"ס', 'מתוארכת', 'מתוארך', 'מתוארכות', 'מתוארכים', 'מיוקן', 'פליוקן', 'רביעון', 'פלאוקן', 'פליסטוקן', 'הולוקן', 'קמבריון', 'אורדוביק', 'קרבון', 'פלאוזואיקון', 'מזוזואיקון', 'קנוזואיקון', 'נאוליתית', 'כלכוליתית', 'סירוס', 'בת לוויה', 'אהב[תוה]*', 'הצעת [ה]*נישואי[םן]*', 'סדרת טל[וו]יזיה', '[סרט]*קולנוע', 'אקרנים', 'שחקן', 'ספורט[אית]*', 'כדורגל[ןנית]*', 'הכדורגל', 'הכדורסל', 'כדורסל[ןנית]*', 'אולימפי[אדהת]*', '"סרט"', 'שחיינית', 'אישות', 'ישו(\s|$)', 'השילוש הקדוש', 'ג[י]*אולוג', 'אש[כך][יהום]*(\s|$)', 'כ[ו]*ח גברא', 'הזד[ו]*וגות', 'הברית החדשה', 'הבשורה על פי', 'חיזור[הים]', 'נרתיק', 'יהוה|יְהוָה', '^שדי$', 'אלוהים|אלהים|אלוהי|אלהי|אלוה|אלוהות|אלהות', 'אֲדֹנָי יְהוִה', 'אדני יהוה', 'אדוני|אדני', 'צבאות|אלוהיו|אלהיו|אלוהיך|אלהיך|אלוהינו|אלהינו|אלוהיכם|אלהיכם|אלוהיהם', '(\s|^)יה(\s|$)', 'האל|האלים', '^(אלים)$', 'מיתולוגיה', 'משפט העברי', 'פי התורה', 'הלכה [ה]*יהודית', 'פי התנ"ך', 'פי המסופר בתנ"ך', 'פי התלמוד', 'פי הגמרא', 'פי חז"ל', 'מיסטי[יםקה]*', 'חוק [ה]*מקראי', 'מסורת [ה]*יהודית', 'ח[ו]*קר[י]* [ה]*מקרא', 'דמות מקראית', 'הקדוש', 'אֱלֹהֵי', 'אֵל ', 'אֱלֹהֶ', 'אֱלֹהִים', 'המחבר המקראי', 'המספר המקראי', 'פרשנות המקראית', 'פרשנות מקראית', 'המסורת המקראית', 'מסורת מקראית'];
        $prefix = '[בכלמשהו]*';
        $result = [];

        foreach ($words as $word) {
            $pattern = '/' . $prefix . $word . '/';
            $matches = [];
            preg_match_all($pattern, $text, $matches);
            if (!empty($matches[0])) {
                $result[$word] = $matches;
            }
        }

        return $result;
    }
    /** @inheritDoc */
    public function getAllowedParams() {
        return [
            'text' => [
                ParamValidator::PARAM_TYPE => 'string',
                ApiBase::PARAM_HELP_MSG => 'apihelp-bad-words-param-text',
            ],
        ];
    }

    public function mustBePosted() {
        return true;
    }

    public function needsToken() {
        return 'csrf';
    }

    public function isWriteMode() {
        return false;
    }

    /**
     * @inheritDoc
     */
    public function getExamples() {
        return [
            'api.php?text=hello_world' => 'apihelp-bad-words-example-1'
        ];
    }
    public function getHelpUrls() {
        return [''];
    }
}
